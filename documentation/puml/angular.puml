' -----------------------------------------------------------------------------------------------------------
```puml
@startuml auth_store_component
    ' Auth
    [Auth Store]
    AuthLogIn -- [Auth Store]
    AuthLogOut -- [Auth Store]
    AuthGetStatus -- [Auth Store]
    AuthRefresh -- [Auth Store]
    AuthRefreshLogged -- [Auth Store]
    AuthResetPassword -- [Auth Store]
    [Auth Store] -- selectAuthIsAuthenticated
    [Auth Store] -- selectAuthUsername
    [Auth Store] -- selectAuthErrorMessage
    [Auth Store] -- selectAuthAccessToken
    [Auth Store] -- selectAuthResetPWDStatus
    [Auth Store] -- selectAuthRole
    [Auth Store] -- selectAuthIsAdmin
    [Auth Store] -- selectAuthUserID

    [LogIn] <.. [LoginComponent]
    [LogOut] <.. [LoginComponent]
    [Refresh] <.. [AppComponent]

    [ResetPassword] <.. [ResetPasswordComponent]
    selectAuthIsAuthenticated <.. [LoginComponent]
    selectAuthIsAuthenticated <.. [LayoutComponent]
    selectAuthUsername <.. [LoginComponent]
    selectAuthUsername <.. [RegisterComponent]
    selectAuthUsername <.. [AvatarComponent]
    selectAuthAuthErrorMessage <.. [LoginComponent]
    selectAuthAccessToken <.. TokenInterceptorService
    selectAuthResetPWDStatus <.. [ResetPasswordComponent]
    selectAuthIsAdmin <.. [HomeComponent]
    selectAuthUserID <.. [HomeComponent]
    selectAuthUserID <.. [CollectionsComponent]
    selectAuthUserID <.. [DocumentComponent]
@enduml
```

' -----------------------------------------------------------------------------------------------------------
```puml
@startuml core_store_component
    [Core Store]
    CoreGetUsersPermissions -- [Core Store]
    CoreGetUsers -- [Core Store]
    CoreGetUser -- [Core Store]
    CoreGetSVGSet -- [Core Store]

    [Core Store] -- selectCoreLoggedInUser 
    note top of selectCoreLoggedInUser
      See the main class diagram: the logged in user (User class) contains information 
      about its documents and accesible collection through the Permissions class
    end note

    [Core Store] -- selectCoreUserPermissions
    [Core Store] -- selectCoreUserList
    [Core Store] -- selectCoreServerStatus
    [Core Store] -- selectCoreSVGAgnosticOrSemanticSymbolSet

    [CollectionsComponent] ..> CoreGetUser
    [TrainingSetsComponent] ..> CoreGetUser

    [PermissionsComponent] ..> CoreGetUsersPermissions
    [PermissionsComponent] ..> CoreGetUsers

    [AgnosticRepresentationComponent] ..> CoreGetSVGSet
    [SemanticRepresentationComponent] ..> CoreGetSVGSet

    [ServerStateComponent] ..> CoreGetServerStatus

    selectCoreLoggedInUser <.. [CollectionsComponent]
    selectCoreLoggedInUser <.. [TrainingSetsComponent]
    
    selectCoreUserPermissions <.. [PermissionsComponent]
    selectCoreUserList <.. [PermissionsComponent]

    selectCoreServerStatus <.. [ServerStateComponent]
    selectCoreSVGAgnosticOrSemanticSymbolSet <.. [AgnosticRepresentationComponent]
    selectCoreSVGAgnosticOrSemanticSymbolSet <.. [SemanticRepresentationComponent]
    
@enduml
```

' -----------------------------------------------------------------------------------------------------------
```puml
@startuml home_store_component
    [Home Store]
    HomeGetLastDocuments -- [Home Store]
    HomeUpdateLastDocuments -- [Home Store]
    [Home Store] -- selectHomeLastDocuments

    [HomeComponent] ..> HomeGetLastDocuments
    [DocumentsComponent] ..> HomeUpdateLastDocuments
    [DocumentComponent] ..> HomeUpdateLastDocuments
    selectHomeLastDocuments <.. [HomeComponent]
@enduml
```

' -----------------------------------------------------------------------------------------------------------
```puml
@startuml breadcrumbs_store_component
    [Breadcrumbs Store]
    BreadcrumbsUpdateDocument -- [Breadcrumbs Store]
    BreadcrumbsUpdateDocumentBreadcrumbs -- [Breadcrumbs Store]
    [Breadcrumbs Store] -- selectBreadcrumbs

    [DocumentComponentOld] ..> BreadcrumbsUpdateDocument
    [CollectionsComponent] ..> BreadcrumbsUpdateCollection
    [DocumentsComponent] ..> BreadcrumbsUpdateCollection

    selectBreadcrumbs <.. [BreadcrumbsComponent]
@enduml
```

' -----------------------------------------------------------------------------------------------------------
```puml
@startuml documents_store_component
    [Documents Store]
    DocumentsGetCollection -- [Documents Store]
    DocumentsCreateSubcollection -- [Documents Store]
    DocumentsDeleteSubcollection -- [Documents Store]
    DocumentsMoveDocumentsToSubcollection -- [Documents Store]
    DocumentsMoveDocumentsToNewSubcollection -- [Documents Store]
    DocumentsResetDocumentsServerError -- [Documents Store]

    [Documents Store] -- selectDocumentsCollection
    [Documents Store] -- selectDocumentsChangedCollectionID
    [Documents Store] -- selectDocumentsServerError

    [CollectionsComponent] ..> DocumentsResetDocumentsServerError
    [DocumentsComponent] ..> DocumentsGetCollection
    [DocumentsComponent] ..> DocumentsCreateSubcollection
    [DocumentsComponent] ..> DocumentsDeleteSubcollection
    [DocumentsComponent] ..> DocumentsMoveDocumentsToSubcollection
    [DocumentsComponent] ..> DocumentsMoveDocumentsToNewSubcollection

    selectDocumentsCollection <.. [DocumentsComponent]
    selectDocumentsChangedCollectionID <.. [DocumentsComponent]
@enduml
```



' -----------------------------------------------------------------------------------------------------------
```puml
@startuml document_store_component
    [Document Store]
    DocumentGetOverview -- [Document Store]
    DocumentMoveImagesToSection -- [Document Store]
    DocumentNewSection -- [Document Store]
    DocumentMoveImagesToDefaultSection -- [Document Store]
    DocumentRenameSection -- [Document Store]
    DocumentDeleteSection -- [Document Store]
    DocumentReorderSections -- [Document Store]
    DocumentGetSection -- [Document Store]
    DocumentReorderImages -- [Document Store]
    DocumentGetPartsInImages -- [Document Store]


    [Document Store] -- selectDocumentOverview
    [Document Store] -- selectDocumentSection
    [Document Store] -- selectDocumentPartsInImages
    

    [DocumentComponent] ..> DocumentGetOverview
    [ReorderSectionsComponent] ..> DocumentGetOverview
    [DocumentThumbnailComponent] ..> DocumentMoveImagesToSection
    [SectionComponent] ..> DocumentNewSection
    [SectionComponent] ..> DocumentRenameSection
    [SectionComponent] ..> DocumentDeleteSection
    [ReorderSectionsComponent] ..> DocumentReorderSections
    [ReorderImagesComponent] ..> DocumentGetSection
    [ReorderImagesComponent] ..> DocumentReorderImages
    [DocumentComponent] ..> DocumentGetPartsInImages
    [SectionComponent] ..> DocumentMoveImagesToDefaultSection

    selectDocumentOverview <.. [DocumentComponent]
    selectDocumentOverview <.. [ReorderSectionsComponent]
    selectDocumentSection <.. [ReorderImagesComponent]
    selectDocumentPartsInImages <.. [DocumentComponent]
@enduml
```


' -----------------------------------------------------------------------------------------------------------
```puml
@startuml model_class
entity Entity {
    id: number
}
note top of Entity : To minimize the number of lines in the diagram\nall classes deriving Entity are drawn with an E inside a circle as this class Entity

class User {
    username: string
}

entity Document {
  name: string
  path: string
  thumbnailBase64Encoding: string
  comments: string
  imagesOrdering: string
  notationType: string
  manuscriptType: string
  composer: string
}
entity Collection {
  name[0..1]: string
  comments[0..1]: string
  parentId[0..1]: number
  thumbnailBase64Encoding[0..1]: string
}

entity Image {
  documentId: number
  filename: string
}


entity Page {
}


entity Part {
  name: string
  comments[0..1]: string
}

entity Region {
  notationType[0..1]: string 
}

note right of Region::notationType
  When it's different from the document notation type
end note


class BoundingBox {
  id [0..1]: number 
  fromX: number
  fromY: number
  toX: number
  toY: number    
}


entity AgnosticSymbol {
  positionInStaff: string
  agnosticSymbolType: string
  approximateX[0..1]: number;
  comments[0..1]: string
}

class Strokes {
}

class Point {
  time: number
  x: number
  y: number
}

entity RegionType {
  name: string
  hexargb: string
  help: string
}

entity RegionInteractionType {
    name: string
}

class Permissions {
    permission: string
}


enum EnumState {
    doublechecked
    done
    inprogress
} 
class State {
  comments: string
}


Document *--> "*" Image
Document *--> "*" Part
Document *-> "*" State
Collection *-- "*" Document
Collection *--> "*" Collection: "subcollections"

Image *-> "*" Page
Image *--> "*" State
Image -> Part 

note right of BoundingBox::id
  We may associate to a symbol, region or page
end note


Page *--> "0..1" BoundingBox
Page "0..1" *- "*" Region
Page --> "0..1" Part 

Region *--> "0..1" BoundingBox
Region *--> "*" AgnosticSymbol
Region *-> "0..1" RegionType

AgnosticSymbol *--> "0..1" BoundingBox
AgnosticSymbol *--> "0..1" Strokes
AgnosticSymbol *--> "0..1" Part


Strokes *-> "*" Stroke: strokeList
Stroke *-> "*" Point: points


RegionType --> "0..1" RegionInteractionType


Permissions -> Collection

State *--> EnumState

User --> "*" Document
User --> "*" Permissions

@enduml
```


' -----------------------------------------------------------------------------------------------------------

```puml
// ***** GUARD MECHANISM SEQUENCE DIAGRAM ****
@startuml guard_sequence
actor User
participant "/documents/collections" as urlCollections <<URL>>
participant AppRoutingModule

AuthGuardService -\\ Store: select(selectIsAuthenticated) <<async subscription>>
note right: This ngrx select will be invoked each time \n the store changes its value
Store -> AuthState: isAuthenticated
return
Store -\\ AuthGuardService
AuthGuardService --> AuthGuardService: setIsAuthenticated
 
User -> urlCollections: Go to any page in MuRET
urlCollections -> AppRoutingModule: search route starting with "documents"
AppRoutingModule -> AuthGuardService: canActivate
return

alt User has permissions
    AppRoutingModule --> DocumentsModule: <<forward request>>
    DocumentsModule --> DocumentsRoutingModule: search route /collections
    return
    control CollectionsComponent
    DocumentsModule --> CollectionsComponent
else User has not permissions
    control LoginComponent
    AppRoutingModule --> LoginComponent
end
@enduml
```

' -----------------------------------------------------------------------------------------------------------

```puml
@startuml appcomponent_class
[AppComponent] *-> [LayoutComponent]
[AppComponent] *--> Router
[AppComponent] *--> AuthStore
@enduml
```

' -----------------------------------------------------------------------------------------------------------


```puml
@startuml appcomponent_sequence
AppComponent -\\ Router: subscribe() <<async subscription>>
Router -\\ AppComponent: refresh event
create Refresh
AppComponent -> Refresh
return r
AppComponent -> AuthStore: dispatch(r)
note right: This will reload session data into the store
@enduml
```


' -----------------------------------------------------------------------------------------------------------

```puml
@startuml authentication_sequence
actor Client
participant Store
create LogIn
Store -> LogIn : new (credentials: Credentials)
LogIn -> Store: l
Client -> Store: dispatch(l)
control AuthEffects
Store -> AuthEffects: LogIn
control AuthService
AuthEffects -> AuthService: attemptAuth$(credentials)
boundary HttpClient
AuthService -> HttpClient: HTTP post '/auth/login' (credentials)
return
participant LoginSuccess
participant LogInFailure
Participant authReducers
entity AuthState
alt Success
    create LoginSuccess
    AuthEffects -> LoginSuccess: new(r: JwtResponse)
    return
    AuthEffects -> SessionData: saveSessionData(r)
    AuthEffects -> authReducers 
    authReducers -> AuthState: set values from r: JwtResponse
else Error
    create LogInFailure
    AuthEffects -> LogInFailure: new (error message)
    return
    AuthEffects -> authReducers 
    authReducers -> AuthState: set state from error message
end

@enduml
```

' -----------------------------------------------------------------------------------------------------------

```puml
@startuml corestore_class

class ServerStatusState {
    status: string
}

class APIRestServerError {
  status[0..1]: number
  message[0..1]: string
  detailedMessage[0..1]: string
  url[0..1]: string
  caller[0..1]: any
} 

CoreState *-> "0..1" RouterReducerState
CoreState *--> UserState
CoreState *--> ServerStatusState
CoreState *--> FontsState

FontsState *--> SVGSet: "svgAgnosticOrSemanticSymbolsSet"
FontsState *--> APIRestServerError

@enduml
```

' -----------------------------------------------------------------------------------------------------------
```puml
@startuml layout_component
[LayoutComponent] *-> [ServerStateComponent]
[LayoutComponent] *--> [AvatarComponent]
[LayoutComponent] *--> [RouterOutlet]
@enduml
```


' -----------------------------------------------------------------------------------------------------------
```puml
@startuml home_sequence
actor User
participant "/" as urlRoot <<URL>>
participant AppRoutingModule 
participant DocumentsRoutingModule
 
User -> urlRoot: Go to home page 
urlRoot -> AppRoutingModule: search route "/"
AppRoutingModule --> DocumentsRoutingModule: <<forward request>> 
note right: The AuthGuard allows the login
DocumentsRoutingModule --> HomeModule
control HomeComponent
HomeModule --> HomeComponent
@enduml
```

' -----------------------------------------------------------------------------------------------------------
```puml
@startuml document_component
[DocumentComponent] -- section
[DocumentComponent] -- sections
[DocumentComponent] -- includeNewSection
[DocumentComponent] -- imageOverview
[DocumentComponent] -- images
[DocumentComponent] -- selectionManager
[DocumentComponent] -- partsInImages

imageOverview )-- [SectionComponent]
section )-- [SectionComponent]
sections )-- [SectionComponent]
includeNewSection )-- [SectionComponent]
documentParts )-- [SectionComponent]
documentPath )-- [SectionComponent]
images )-- [SectionComponent]
selectionManager )-- [SectionComponent]
partsInImages )-- [SectionComponent]


() "documentPath" as SectionComponent.documentPath
() "section" as SectionComponent.section
() "sections" as SectionComponent.sections
() "imageID" as SectionComponent.imageID
() "filename" as SectionComponent.filename
() "documentParts" as SectionComponent.documentParts
() "selectionManager" as SectionComponent.selectionManager
() "imagePartIds" as SectionComponent.imagePartIds

[SectionComponent] -- SectionComponent.selectionManager
[SectionComponent] -- SectionComponent.documentPath
[SectionComponent] -- SectionComponent.section
[SectionComponent] -- SectionComponent.sections
[SectionComponent] -- SectionComponent.imageID
[SectionComponent] -- SectionComponent.filename
[SectionComponent] -- SectionComponent.documentParts
[SectionComponent] -- SectionComponent.imagePartIds

SectionComponent.selectionManager )-- [DocumentThumbnailComponent]
SectionComponent.documentPath )-- [DocumentThumbnailComponent]
SectionComponent.section )-- [DocumentThumbnailComponent]
SectionComponent.sections )-- [DocumentThumbnailComponent]
SectionComponent.imageID )-- [DocumentThumbnailComponent]
SectionComponent.filename )-- [DocumentThumbnailComponent]
SectionComponent.documentParts )-- [DocumentThumbnailComponent]
SectionComponent.imagePartIds )-- [DocumentThumbnailComponent]

() "documentParts" as DocumentThumbnailComponent.documentParts
() "imagePartIds" as DocumentThumbnailComponent.imagePartIds
[DocumentThumbnailComponent] -- DocumentThumbnailComponent.documentParts
[DocumentThumbnailComponent] -- DocumentThumbnailComponent.imagePartIds

DocumentThumbnailComponent.documentParts )-- [ImagePartsComponent]
DocumentThumbnailComponent.imagePartIds )-- [ImagePartsComponent]

() "imageID" as DocumentThumbnailComponent.imageID
 DocumentThumbnailComponent.imageID -- [DocumentThumbnailComponent]

DocumentThumbnailComponent.imageID )-- [ImagePhasesComponent]

[appSelectableContainer] --( selectionManager
selectionManager )-- [appSelectable]

[appSelectableContainer] <- [DocumentComponent]
selectionManager <- [DocumentThumbnailComponent]: getSelected()

() "onSelected" as DocumentThumbnailComponent.onSelected
() "onDeselected" as DocumentThumbnailComponent.onDeselected
() "modelID" as DocumentThumbnailComponent.modelID

DocumentThumbnailComponent.onSelected -- [DocumentThumbnailComponent]
DocumentThumbnailComponent.onDeselected -- [DocumentThumbnailComponent]
DocumentThumbnailComponent.modelID -- [DocumentThumbnailComponent]

[appSelectable] -( DocumentThumbnailComponent.onSelected
[appSelectable] --( DocumentThumbnailComponent.onDeselected
[appSelectable] --( DocumentThumbnailComponent.modelID



@enduml
```

' -----------------------------------------------------------------------------------------------------------
```puml
@startuml selectable_class

class SelectableDirective

class SelectableContainerDirective

class SelectionManager {
  +addOrRemove(item: SelectableDirective)
  +remove(item: SelectableDirective)
  +clear()
  +replace(item: SelectableDirective) 
  +selectRange(to: SelectableDirective)
  +addSelectable(el: SelectableDirective)
  getSelected(): SelectableDirective[]
}

SelectionManager --> "n" SelectableDirective: selectedElements
SelectionManager --> "n" SelectableDirective: selectableElements

SelectableContainerDirective *--> SelectionManager
SelectableDirective *--> SelectionManager
@enduml
```


' -----------------------------------------------------------------------------------------------------------
```puml
@startuml selectable_sequence
actor User
boundary DocumentComponent
create entity SelectionManager
DocumentComponent -> SelectionManager
create control appSelectableContainer
DocumentComponent -> appSelectableContainer : selectionManager
create boundary SectionComponent
DocumentComponent -> SectionComponent : selectionManager
create boundary DocumentThumbnailComponent
SectionComponent -> DocumentThumbnailComponent : selectionManager
create control appSelectable
DocumentThumbnailComponent -> appSelectable : selectionManager and modelID=documentID
User -> DocumentThumbnailComponent: mouse event
note right : mouse click on the document thumbnail that has the appSelectable directive
DocumentThumbnailComponent -> appSelectable
note right : the mouse event is captured by the appSelectable through the :host angular mechanism
alt shift + left click
  appSelectable -> SelectionManager: selectRange(this)
end
alt meta key + click
  appSelectable -> SelectionManager: addOrRemove(this)
end
alt click
  appSelectable -> SelectionManager: replace(this)
end
DocumentThumbnailComponent -> SelectionManager: getSelected()
SelectionManager --> DocumentThumbnailComponent: appSelectable[]
note right : Return all selected appSelectable
loop for each appSelectable
  DocumentThumbnailComponent --> appSelectable: modelID
  note right : It gets the modelID with which the appSelectable was created
end  

alt click
  User -> Document: mouse click event
  note right : mouse click on the document that has the appSelectableContainer directive
  Document -> appSelectableContainer
  note right : the mouse event is captured by the appSelectableContainer through the :host angular mechanism. \n M
  appSelectableContainer -> SelectionManager: clear()
end


@enduml
```


